Выражение for_each почти всегда более предпочтительно
для создания множественных копий ресурса по сравнению с
параметром count, однако следует отметить, что с точки
зрения условной логики присваивание count значений 0 или 1
обычно оказывается более простым, чем назначение for_each
пустой/непустой коллекции. В связи с этим параметр count
следует добавлять для условного создания ресурсов, тогда как
for_each лучше подходит для любых других видов циклов и
условных выражений.


•Всегда используйте команду plan. Ею можно выявить все эти
загвоздки. Тщательно просматривайте ее вывод и
обращайте внимание на ситуации, когда Terraform
планирует удалить ресурсы, которые, скорее всего, удалять
не стоит.
• Создавайте, прежде чем удалять. Если вы хотите заменить
ресурс, хорошенько подумайте, нужно ли создавать замену
до удаления оригинала. Если ответ положительный, в этом
может
 помочь
 create_before_destroy.
 Того
 же
результата можно добиться вручную, выполнив два шага:
сначала добавить в конфигурацию новый ресурс и запустить
команду apply, а затем удалить из конфигурации старый
ресурс и воспользоваться командой apply еще раз.
• Изменение идентификаторов требует изменения состояния.
Если вы хотите поменять идентификатор, связанный с
ресурсом (например, переименовать aws_security_group
с instance на cluster_instance), избегая при этом
удаления ресурса и создания его новой версии, необходимо
соответствующим образом обновить файл состояния
Terraform. Никогда не делайте этого вручную — используйте
вместо
 этого
 команду
 terraformstate.
 При
переименовании идентификаторов следует выполнить
команду terraformstatemv
• Некоторые параметры нельзя изменять. Параметры многих
ресурсов неизменяемые. Если попытаться их изменить,
Terraform удалит старый ресурс и создаст вместо него
новый. На странице каждого ресурса обычно указывается,
что происходит при изменении того или иного параметра,
поэтому не забывайте сверяться с документацией. Всегда
используйте
 команду
 plan
 и
 рассматривайте
целесообразность
 применения
 стратегии
create_before_destroy.

API некоторых облачных провайдеров, таких как AWS,
асинхронные
 и
 имеют
 отложенную
 согласованность.
Асинхронность означает, что интерфейс может сразу же
вернуть ответ, не дожидаясь завершения запрошенного
действия. Отложенная согласованность значит, что для
распространения изменений по всей системе может
понадобиться время; пока это происходит, ваши ответы могут
быть несогласованными и зависеть от того, какая реплика
источника данных отвечает на ваши API-вызовы.
