***************************************************************************

***************************************************************************
Terraform не поддерживает выражения if. Но того же результата можно добиться с помощью параметра count и двух особенностей языка.
***************************************************************************
Если внутри ресурса параметру count присвоить значение 1, вы получите копию этого ресурса; если указать 0, этотресурс вообще не будет создан.
***************************************************************************
Terraform поддерживает условные выражения в формате <CONDITION>?<TRUE_VAL>:<FALSE_VAL>. Это тернарный синтаксис, с которым вы можете быть знакомы по другим
языкам программирования. Он проверит булеву логику CONDITION и, если результат равен true, вернет TRUE_VAL;в противном случае возвращается FALSE_VAL
***************************************************************************
Для кода промышленного уровня рекомендую еще строже
закреплять версию:
terraform {
# Требуем исключительно версию
 Terraform
0.12.0
    required_version = "= 0.12.0"
}
Это вызвано тем, что даже переход на новые «заплаточные»
версии (скажем, 0.12.0 —> 0.12.1) может создать проблемы.
Иногда они содержат ошибки, а иногда у них ломается
обратная совместимость (хотя в наши дни это случается реже).
Но еще более серьезной проблемой является то, что файл
состояния, измененный более новой версией Terraform, уже
нельзя использовать в старых версиях. Представьте, к примеру,
что весь ваш код развернут с помощью Terraform 0.12.0, и тут
вдруг разработчик, у которого установлена версия 0.12.1,
применяет к некоторым из ваших модулей команду
terraformapply. В результате файлы состояния этих модулей
больше не совместимы с 0.12.0, поэтому вы вынуждены
обновить все свои компьютеры для разработки и CI-серверы на
0.12.1!
***************************************************************************
Чтобы объяснить Terraform, как обрабатывать ошибки, полученные в результате инициализации, можно
использовать аргумент on_failure: если присвоить ему
"continue", Terraform проигнорирует ошибку и продолжит
создание/удаление ресурса; если присвоить ему "abort",
Terraform прервет создание/удаление.
***************************************************************************
Data source полезная штука, которая позволяет смотреть ресурсы, доступные у провайдера.
Например, получить список availability_zones в данном регионе, получить account_id. Синтаксис:

data "aws_availability_zones" "my_zone"{}

output "my_aws_availability_zones" {
    value = data.aws_availability_zones.my_zone.names
}
***************************************************************************

***************************************************************************

***************************************************************************

***************************************************************************

***************************************************************************

***************************************************************************
