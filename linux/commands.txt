скрипт, чтобы быстро посмотреть, кто занимает оперативную память:
ps axo rss,comm,pid | awk '{ proc_list[$2] += $1; } END { for (proc in proc_list) { printf("%d\t%s\n", proc_list[proc],proc); }}' | sort -n | tail -n 10 | sort -rn | awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}'

проверить какие процессы больше всего используют swap:
for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done

утилита для мониторинга, netdata
bash <(curl -Ss https://my-netdata.io/kickstart.sh)

Проверить срок действия сертификата:
echo | openssl s_client -connect redhat.com:443 2>/dev/null | openssl x509 -noout -dates

vim блочное выделение
CTRL+v - стрелками выделяем текст - y (копировать) - p (вставить)

На сервере К которому подключаемся по SSH права на каталог ~/.ssh должны быть 700, а на файл .ssh/authorized_keys — 600:
chmod 700 .ssh/
chmod 600 .ssh/authorized_keys
chown -R username:username /home/username/.ssh

Автодополнение команд для root
должен быть установлен bash-completion
в /root/.bashrc добавить строку complete -cf sudo
в рута переходить sudo -i   (если sudo -s не работает)

Выполнить bash команды из консоли mysql
\! ls -l
\! bash   -   перейти в консоль системы (потом exit для выхода)

Узнать свой внешний IP-адрес
curl ident.me
     ipinfo.io
     2ip.ua

Посмотреть наиболее часто выполняемые команды
    history | awk '{print $2}' | sort | uniq -c | sort -rn | head

Показать список только директорий
    ls -dl */

Показать 10 папок наибольшего размера
    du -hs /var/* | sort -hr | head

Удалить все, кроме файла test.txt
    rm -f !(test.txt)

Веб-сервер на python и начинает отдавать файлы
    python3 -m http.server

Смотреть логи в реальном времени, аналог tail -f
    less +F somefile

Запостить текст из консоли в браузер (чтобы скинуть ссылку другу)
    ps aux | nc termbin.com 9999
    less vpn.yml | nc termbin.com 9999
можно добавить alias для частого использования alias tb='nc termbin.com 9999'

Просмотр, какие приложения потребляют трафик (утилиты iftop и nethogs дают более подробную информацию)
    ss -p

Сайт по шагам показывает процесс установления TLS-соединения
    https://tls.ulfheim.net/

Завершить сессию юзера (кикнуть юзера)
сначала узнаем id юзера
    w
    pkill -HUP -t pts/1

Выполнить команду от имени другого пользователя:
    su anotheruser -c "ls -la"

Косвенно узнать дату установки ОС:
    ls -ld /lost+found/

Список GPG ключей репозиториев:
    apt-key list

Подключение к различным базам данных:
psql -U user -h host -p port -d database --set=variable=value -W
    -U, the PostgreSQL user you want to connect as
    -h, the managed database’s hostname or IP address
    -p, the TCP port on which the managed database is listening for connections
    -d, the specific database you want to connect to
    --set, precedes other connection variables and the variables’ values. For example, if you want to validate the database’s CA certificate when you connect, you would include --set=sslmode=require in your command
    -W, which tells psql to prompt you for the PostgreSQL user’s password. Note that you could precede the psql command with PGPASSWORD=password, but it’s generally considered more secure to not include passwords on the command line
*********
mysqlsh -u user -p -h host -P port -D database --sql
    -u, the MySQL user you want to connect as
    -p, tells mysqlsh to prompt for the user’s password. You could include your password directly in the connection command following the -p flag (without a space, as in -ppassword) but, for security reasons, this is generally not recommended
    -h, the database’s hostname or IP address
    -P, the TCP port on which MySQL is listening for connections
    -D, the specific database you want to connect to
*********
redli --tls -h host -a password -p port
    -h, the host to connect to. This can either be a hostname or an IP address
    -a, the password used to authenticate to the Redis instance
    -p, the port to connect to
*********
mongo "mongodb://username:password@managed_db_hostname_or_URL:port/connection_options"
    mongodb://: this prefix specifies that the elements following it adhere to MongoDB’s connection URI format
    username: the name of your MongoDB user
    password: your MongoDB user’s password
    managed_db_hostname_or_URL: the host where your MongoDB database can be accessed
    port: the port number on which your managed MongoDB instance is running. It’s only necessary to include this if your database is running on a port other than Mongo’s default, 27017
    connection_options: additional connection options

mongo "mongodb://username:password@managed_db_hostname_or_URL:port/connection_options" --tls --tlsCAFile /path/to/CA/file
*********

Быстрый способ зашифровать/расшифровать файл:
    gpg -c file.txt
    gpg -d file.txt

Игнорировать self signed certificate:
    curl --insecure -I https://192.168.33.109
*******************************************
Общая информация о железе. С ключом -v информация будет более подробная.
    lspci

Процессор
    lshw -c cpu
    dmidecode --type processor
    cat /proc/cpuinfo

Материнская плата
    dmidecode --type baseboard

Оперативная память
    lshw -short | grep -i "memory"
    dmidecode --type memory

Диски (apt/dnf install smartmontools)
    smartctl -i /dev/sda
    lsblk -a
    lshw -class disk -class storage
*******************************************
просканировать порты:
   netcat -z -v domain.com 1-1000

Общение между двумя машинами:
   на 1-ой: netcat -l 4444
   на 2-ой: netcat domain.com 4444
   дальше пишем сообщение, жмем Enter
*******************************************
Лог ошибочных попыток логина:
    faillog

Лог последних логинов в систему:
    lastlog | less
*******************************************
Системные сообщения
dmesg -T
dmesg -T --level=emerg,alert,crit,err,warn
*******************************************
Скачать файл и сохранить под другим именем
    curl -o rockylist.txt https://mirror.yandex.ru/rockylinux/imagelist-rocky

Игнорирование ошибок сертификатов
    curl --insecure https://10.20.30.1/test_app
    curl -k https://10.20.30.1/test_app
*******************************************
Переименовать ветку в git (переходим на нее и переименовываем):
    git checkout develop
    git branch -m slurm_develop
*******************************************
На один коммит назад:
    git checkout HEAD^
    git checkout master

на два коммита назад:
    git checkout HEAD^^
*******************************************
Привязать еще один удаленный репозиторий, если с названием origin уже есть:
git remote add origin git@gitlab.slurm.io:git_sXXXXXX/slurm_ssh_remote_push.git
меняем origin на нужное название, например gitlab_repo, то есть команда:
git remote add gitlab_repo git@gitlab.slurm.io:git_s014966/slurm_ssh_remote_push.git
потом
git push -u gitlab_repo master
*******************************************
Настраиваем git:
git config --global user.name "Artem Listopad"
git config --global user.email "rakvay@mail.ru"
git config --global core.editor nano
*******************************************
Правильное использование rebase:

git fetch # скачиваем изменения с сервера
# надо находиться в ветке, которую вы хотите обновить
# вместо origin/master нужно вписать вашу mainstream-ветку
git rebase origin/master
# далее, если возник конфликт, исправляем его и делаем 
git add file-with-conflict.go
git rebase --continue
# повторяем до тех пор, пока не появится сообщение
# Successfully rebased and updated ...
*******************************************
Настраиваем фаервол:
https://www.digitalocean.com/community/tutorials/iptables-essentials-common-firewall-rules-and-commands
*******************************************
Сканирование подсети или отдельных адресов:
    nmap 192.168.1.0/24 или nmap 192.168.1.*
    nmap 192.168.1.1,2,3

Быстрый скан сети пингом. Позволяет сразу увидеть, какие хосты в сети запущены и отвечают на пинг.
    nmap -sP 192.168.1.0/24

Скан хоста, не отвечающего на пинг. Актуально, если открытые порты есть, но хост не отвечает на icmp запросы.
    nmap -Pn 192.168.1.1

Быстрое сканирование. Если не добавить ключи, увеличивающие скорость, дефолтный скан будет длиться очень долго. 
    nmap -F 192.168.1.1
    nmap -T4 192.168.1.1

Подробный скан всех портов хоста. Небольшой скрипт nmap.sh, который по очереди подробно сканирует все открытые порты. Процесс может длиться долго.
    #!/bin/bash
    ports=$(nmap -p- --min-rate=500 $1 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)
    nmap -p$ports -A $1
Использовать
./nmap.sh 192.168.1.1
*******************************************
показать все строки без символа # в начале:
   grep "^[^#]" /etc/graylog/server/server.conf
*******************************************
простейший балансировщик на nginx:

server {
   listen       80 default_server;
   server_name graylog.artem.home;

   location / {
       proxy_set_header Host $http_host;
       proxy_set_header X-Forwarded-Host $host;
       proxy_set_header X-Forwarded-Server $host;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Graylog-Server-URL http://$server_name/;
       proxy_pass http://graylog-web-cluster;
   }
}
    upstream graylog-web-cluster {
        server 192.168.33.21:9000 max_fails=3 fail_timeout=30s;
        server 192.168.33.22:9000 max_fails=3 fail_timeout=30s;
        server 192.168.33.23:9000 max_fails=3 fail_timeout=30s;
    }

*******************************************
мониторим сессию удаленного админа при помощи screen:   
   https://habr.com/ru/post/572244/
*******************************************
get list of interfaces:
    ls /sys/class/net
*******************************************
netplan ubuntu 18.04, for example:

ls /sys/class/net   -   get list of interfaces

sudo netplan generate
sudo /etc/netplan/01-netcfg.yaml

DHCP:
network:
    version: 2
    renderer: networkd
    ethernets:
        eth1:
            dhcp4: true

Static IP:
network:
    version: 2
    renderer: networkd
    ethernets:
        eth1:
            addresses:
                - 192.168.66.245/24

WiFi (apt install wpasupplicant   -   for this settings):
network:
  version: 2
  renderer: networkd
  wifis:
    wlp2s0:
      dhcp4: true
      access-points:
        MyWiFiSSID:
          password: Pa$$word_1
     
ens33: 
  dhcp4: false 
  addresses:
    - 192.168.233.154/24
  gateway4: 192.168.233.2 
  nameservers:
  addresses:
    - 1.1.1.1
    - 8.8.8.8
  routes:
    - to: 192.168.111.0/24
      via: 192.168.233.101
      
sudo netplan try
sudo netplan apply
*******************************************
Docker:
Наиболее частые команды, которые приходится использовать, это запуск контейнера:
docker run -d -p 80:80 --restart=always --name nginx-proxy nginx

Просмотр списка запущенных и всех контейнеров:
docker ps
docker ps -a

Просмотр образов:
docker images

Удаление образов, одного или сразу всех:
docker rmi grafana/grafana 
docker rmi $(docker images -a -q)

Вход в консоль контейнера:
docker exec -it nginx-proxy bash

Просмотр логов контейнера:
docker logs nginx-proxy
docker logs --tail 100 nginx-proxy

Статистика потребляемых ресурсов контейнера или группы контейнеров:
docker stats grafana7
docker stats container1 container2
docker stats grafana7 --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

Просмотр запущенных процессов в контейнере:
docker top grafana7

Вот пожалуй и всё из основного, что обычно нужно. Для полноты картины добавлю еще несколько полезных команд, которые нужны реже, но всё равно пригодятся.

Информация о контейнере:
docker inspect nginx-proxy

Выполнить команду в контейнере:
docker exec -it nginx-proxy /usr/sbin/nginx -s reload

Очистить неиспользуемые данные:
docker system prune

Проверить занимаемое докером место:
docker system df
*******************************************
usermod --shell /bin/bash nis    -    change shell to /bin/bash for user nis
or
chsh --shell /bin/bash nis       -    change shell to /bin/bash for user nis
*******************************************
Бинарные журналы учета пользовательских сессий:
    /var/log/lastlog — Последняя сессия пользователей. Прочитать можно командой last
    /var/log/tallylog — Аудит неудачных попыток входа в систему. Вывод на экран с помощью утилиты pam_tally2
    /var/log/btmp — Еже один журнал записи неудачных попыток входа в систему. Просто так, на всякий случай, если вы еще не догадались где следует искать следы активности взломщиков. Открыть файл: last -f /var/log/btmp
    /var/log/utmp — Список входов пользователей в систему на данный момент
    /var/log/wtmp — Еще один журнал записи входа пользователей в систему. Вывод на экран командой utmpdump
*******************************************
LXC
    # 1. создать контейнер с именем myapp
    sudo lxc-create -t download -n myapp -- -d ubuntu -r focal -a amd64

    # 2. посмотреть список контейнеров
    sudo lxc-ls -f

    # 3. запустить контейнер
    sudo lxc-start myapp

    # 4. остановить
    sudo lxc-stop myapp

    # 5. зайти в shell контейнера
    sudo lxc-attach myapp

    # 6. посмотреть файловую систему контейнера
    ls -al /var/lib/lxc/myapp/rootfs
*******************************************
Find the PID of a running program
    pidof bash

Find a PID by file
    fuser --user ~/example.txt 

Get a process name by PID
    ps 3234

List all processes
    ps -e | less

List just your processes
    ps -U tux | less
    pstree -U tux -u --show-pids

List just your processes with context
    ps -U tux -u

Troubleshoot with PIDs
    pmap 1776
*******************************************
Утилита для rpm-дистрибутивов для проверки нужна ли системе перезагрузка:
yum install yum-utils

Проверяем, нужна ли перезагрузка:

# needs-restarting -r
No core libraries or services have been updated since boot-up.
Reboot should not be necessary.

После установки обновлений вывод меняется:

# needs-restarting -r
Core libraries or services have been updated:
 kernel -> 3.10.0-1160.42.2.el7

Reboot is required to ensure that your system benefits from these updates.

More information:
https://access.redhat.com/solutions/27943
*******************************************
last
    Who recently used the system

last root
    When was the last time root logged in as user

lastb
    Shows all bad login attempts into the system
*******************************************
В комментариях к одной из заметок как-то затронули тему ошибочного сноса прав доступа на файлы в Linux. Оказывается, есть очень простой и быстрый способ восстановить дефолтные права доступа для конкретного пакета, либо на все установленные в системе пакеты. Делается это стандартно с помощью rpm. Способ только для rpm-based дистрибутивов
Восстановить права доступа пакета или всех пакетов разом. И то же самое для владельца.
rpm --setperms package
for p in $(rpm -qa); do rpm --setperms $p; done
rpm --setugids package
for p in $(rpm -qa); do rpm --setugids $p; done

Установка пакета package.rpm:
rpm -ivh package.rpm

Обновление пакета package.rpm
rpm -Uvh package.rpm

Удаление пакета package. И его же удаление, но без зависимостей.
rpm -ev package
rpm -ev --nodeps --nosuggest package

Список всех установленных пакетов:
rpm -qa

Список файлов, установленных пакетом:
rpm -ql package

Определение пакета, которому принадлежит файл:
rpm -qf /path/to/file

Список конфигурационных файлов пакета:
rpm -qc package

Список зависимостей пакета:
rpm -qpR package

Посмотреть содержимое пакета package.rpm:
rpm2cpio package.rpm | cpio -t

Извлечение содержимого пакета package.rpm в текущую директорию. Будет воссоздана вся структура каталогов, которые используются в пакете.
rpm2cpio package.rpm | cpio -idv
*******************************************
Renaming/moving files with suffixes quickly:
cp /home/foo/realllylongname.cpp{,-old}

To create a backup file with date:
cp foo.txt{,."$(date +%Y%m%d-%H%M%S)"}

This expands to:
cp /home/foo/realllylongname.cpp /home/foo/realllylongname.cpp-old

List only subdirectories in the current one:
ls -dl */
*******************************************
Если вы хотите сохранять информацию о том, кто получает доступ к тому или иному файлу в ОС Linux, читайте далее, как это сделать. Допустим, у вас есть конфиг nginx в файле /etc/nginx/nginx.conf и вы хотите знать, кто его открывает на чтение или изменяет. Сделать это можно с помощью встроенной подсистемы аудита Linux. 

Для этого понадобится утилита auditctl. Чаще всего она уже присутствует в системе. Если это не так, то ее легко установить:
# dnf install auditctl
# apt install auditctl

Дальше создаем отдельное правило для контроля за конкретным файлом. Так будет проще потом делать выборку:
# auditctl -w /etc/nginx/nginx.conf -p rwa -k nginx_conf
rwa - чтение (r), запись (w), изменение атрибута (a)
nginx_conf - название правила аудита

Проверим текущий список правил auditctl и убедимся, что появилось новое:
# auditctl -l
Удалить правила можно командой:
# auditctl -D

Теперь можно что-то сделать с указанным в правиле файлом. После этого есть несколько способов посмотреть результат аудита.
# aureport -f -i | grep /etc/nginx/nginx.conf

Эта утилита покажет список событий, связанных с правилом, включающим в себя конфиг nginx.conf. В списке будет информация о пользователе, программе, с помощью которой был доступ к файлу, дата события и т.д. 

Более подробную информацию по срабатыванию правила можно увидеть с помощью другой утилиты:
# ausearch -i -k nginx_conf
Конкретизировать вывод только событиями записи файла можно с помощью grep:
# ausearch -i -k nginx_conf | grep O_WRONLY

У ausearch много встроенных ключей для фильтрации событий, так что чаще всего нужную информацию можно получить с их помощью и без grep. 

События аудита записываются в обычный лог файл. Чаще всего это /var/log/audit/audit.log. Для того, чтобы изменения этого файла не привели к потери важных событий имеет смысл дополнительно настроить отправку событий на удаленный сервер хранения логов.
*******************************************
glances - Real time system monitoring tool
Glances is a cross-platform monitoring application that can function in client/server mode and offers a lot of information on a small screen.
Glance can monitor CPU, load average, memory, network interfaces, Disk I/O, processes, and file system spaces utilization.
glances without any options display the real-time system information:

$ glances
*******************************************
Display Linux Uptime in pretty format
uptime -p

Display the time/date since when the system has been running
uptime -s
*******************************************
Полезный сайт c полезными командами, смотреть из консоли:
curl cheat.sh/command

вместо command ввести команду, например:
curl cheat.sh/less
curl cheat.sh/systemctl
*******************************************
Команда last покажет последних подключившихся пользователей, а также события reboot или shutdown.
# last
root   pts/0    192.168.13.197  Sun Oct 23 22:45  still logged in
Информацию команда берёт из бинарного файла /var/log/wtmp, которую туда пишет программа login.

Команда lastlog покажет историю подключений каждого пользователя системы. Причем в том же порядке, как они записаны в файле /etc/passwd.
# lastlog
Username     Port   From       Latest
root       pts/0  192.168.13.197  Sun Oct 23 22:45:11 +0300 2021
Информацию команда берёт из бинарного файла /var/log/lastlog.

Если вы использовали неверные учётные данные при подключении, то информацию об этом можно посмотреть командой lastb.
# lastb
user1  ssh:notty  192.168.13.197  Sun Oct 23 23:04 - 23:04 (00:00)
Информацию команда берёт из бинарного файла /var/log/btmp.

Также информация о ваших подключениях будет в логе сервиса sshd. В rpm дистрибутивах это обычно /var/log/secure, в deb - /var/log/auth.log. Это текстовые файлы, можно посмотреть любым редактором. 

Если хотите почистить за собой следы, то эти файлы можно просто обнулить:
# echo > /var/log/wtmp
# echo > /var/log/btmp
# echo > /var/log/lastlog
# echo > /var/log/secure
*******************************************
Pspy - интересный и полезный инструмент командной строки, предназначенный для наблюдения за процессами без прав root. С его помощью можно видеть команды, выполняемые другими пользователями, в том числе системными. Программа наглядно демонстрирует, почему не стоит светить паролями, постоянными токенами и т.д. в виде аргументов к командам.

Работает она очень просто. Идём в репозиторий (https://github.com/DominicBreuker/pspy) и скачиваем исполняемый файл под обычным пользователем. 
# wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64
# chmod +x pspy64
# ./pspy64

А теперь подключаемся второй вкладкой и запускаем dump базы mysql от рута с передачей пароля через консоль
*******************************************
archive.tgz has ~30 GB. How do you list content of it and extract only one file?

# list of content
tar tf archive.tgz

# extract file
tar xf archive.tgz filename
*******************************************
To sync the contents of dir1 to dir2 on the same system, type:

rsync -av --progress --delete dir1/ dir2

    -a, --archive - archive mode
    --delete - delete extraneous files from dest dirs
    -v, --verbose - verbose mode (increase verbosity)
    --progress - show progress during transfer
*******************************************
how to find all files larger than 20MB:
find / -type f -size +20M

how to find files that have been modified on your system in the past 60 minutes?
find / -mmin -60 -type f

how to find count of .conf files
find /home/user/mydir/ -type f -name "*.conf" | wc -l
*******************************************
get unique ID of your server:
hostid
cat /etc/machine-id
sudo dmidecode | grep -i uuid
*******************************************
Расшарить текст из консоли в браузер (чтобы скинуть ссылку другу)
    htop | nc termbin.com 9999
    htop | nc seashells.io 1337     -     удобный сервис

Быстро поделиться файлом (будет сгенерена ссылка и даже qr code)
    curl --upload-file mydir/file.txt https://transfer.sh/hello.txt

Погода
    wttr.in/Kiev

Курс валют
    rate.sx/btc

Сгенерить QR code и записать его в файл (кодируем слово lenovo)
    curl qrenco.de/lenovo > myqrcode

curl parrot.live
nc rya.nc 1987
*******************************************
Which port is used for ping command?

ping uses ICMP, specifically ICMP echo request and ICMP echo reply packets. There is no 'port' associated with ICMP. Ports are associated with the two IP transport layer protocols, TCP and UDP. ICMP, TCP, and UDP are "siblings"; they are not based on each other, but are three separate protocols that run on top of IP.

ICMP packets are identified by the 'protocol' field in the IP datagram header. ICMP does not use either UDP or TCP communications services, it uses raw IP communications services. This means that the ICMP message is carried directly in an IP datagram data field. raw comes from how this is implemented in software, to create and send an ICMP message, one opens a raw socket, builds a buffer containing the ICMP message, and then writes the buffer containing the message to the raw socket.

The IP protocol value for ICMP is 1. The protocol field is part of the IP header and identifies what is in the data portion of the IP datagram.
*******************************************
dig

Просмотр А записи:
# dig serveradmin.ru

Просмотр конкретных записей, например ns серверов:
# dig serveradmin.ru ns

Просмотр записей через конкретный dns сервер, например ns1.selectel.org:
# dig @ns1.selectel.org serveradmin.ru ns
*******************************************
Просмотр в режиме реального времени за изменением файлов в каталоге. Частая потребность, но когда мне понадобилось это сделать, сразу не догадался каким образом через watch все это организовать.
# watch -d -n 2 'ls -rtlh | tail'
Не забывайте, что по умолчанию tail без параметров выводит только 10 строк. Их число задаётся через ключ -n.

Рекурсивный листинг файлов. Очевидный способ вывести список файлов, в том числе с вложенными директориями следующий: ls -lR. Он не очень удобен, если список потом надо как-то обработать и использовать. Удобнее вывести через find:
# find . -type f -ls

Поиск дубликатов файлов. На первый взгляд монструозная и страшная конструкция, но если разбить её на этапы, то все достаточно просто получается. Сначала идёт поиск файлов с одинаковым размером, потом у этих файлов проверяется md5sum. Если она одинаковая, то выводится список файлов. 
find -not -empty -type f -printf "%s\n" | sort -rn | uniq -d \
| xargs -I{} -n1 find -type f -size {}c -print0 \
| xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate

Быстрое переименование файла. Простой и удобный трюк, хотя я сам по привычке пишу полные имена.
# mv filename.{old,new}

Список наиболее часто используемых команд. Парсится стандартный вывод history.
# history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' \
| sort -rn | head

Запуск матрицы. Включаем и уходим на обед.
# tr -c "[:print:]" " " < /dev/urandom \
| dd cbs=$COLUMNS conv=unblock \
2>/dev/null | GREP_COLOR="1;32" \
grep --color "[^ ]"
*******************************************
mtr

MTR можно запускать как на постоянную работу, так и с автовыходом после определенного количества отправленных пакетов. Плохо, что результат работы в консоли не остаётся. 
# mtr -c3 gmail.com

Если хочется увидеть результат в консоли, то надо добавить еще один ключ:
# mtr -c3 -r gmail.com

Утилита достатчоно функциональна. Подробности лучше в доках посмотреть. Покажу еще один полезный пример. Вместо icmp запросов, можно использовать TCP SYN-пакеты или UDP-датаграммы:
# mtr --tcp gmail.com
# mtr --udp gmail.com
*******************************************
How to Find Which Package a File Belongs in Linux

dpkg -S filename
dpkg-query -S filename
dpkg -S /bin/ls

dnf provides filename
dnf provides *filename
dpkg-query --search '/path/to/file'
rpm -qf /bin/ls
yum whatprovides netstat
*******************************************
если нужно обнулить файл, сохранив при этом часть файла, то можно считать кусок из файла и записать в него же:

tmp=$(tail -n 1000 file)
echo "$tmp" > file
*******************************************
как понять, ты в виртуалке или нет:
systemd-detect-virt
hostnamectl status
*******************************************
For monitoring swap space usage:

    cat /proc/swaps - to see total and used swap size
    grep SwapTotal /proc/meminfo - to show total swap space
    free - to display the amount of free and used system memory (also swap)
    vmstat - to check swapping statistics
    top, htop- to check swap space usage
    atop - to show is that your system is overcommitting memory
    or use one-liner shell command to list all applications with how much swap space search is using in kilobytes:

for _fd in /proc/*/status ; do
  awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $_fd
done | sort -k 2 -n -r | less
*******************************************
Umask 	File result 	    Directory result
000 	666 rw- rw- rw- 	777 rwx rwx rwx
002 	664 rw- rw- r-- 	775 rwx rwx r-x
022 	644 rw- r-- r-- 	755 rwx r-x r-x
027 	640 rw- r-- --- 	750 rwx r-x ---
077 	600 rw---- --- 	    700 rwx --- ---
277 	400 r-- --- --- 	500 r-x --- ---
*******************************************
How to run script as another user without password?

For example (with visudo command):
user1 ALL=(user2) NOPASSWD: /opt/scripts/bin/generate.sh

The command paths must be absolute! Then call sudo -u user2 /opt/scripts/bin/generate.sh from a user1 shell.
*******************************************
What are the possible states of a process in Linux?

Running (R)
Uninterruptible Sleep (D) - The process is waiting for I/O
Interruptible Sleep (S)
Stopped (T)
Dead (x)
Zombie (z)
*******************************************
Давно не было ничего на тему полезных bash команд. Решил немного оживить рубрику. Рассмотрю несколько примеров, которые могут пригодиться на практике при работе с веб сервером. 

С помощью grep и регулярного выражения смотрим список всех IP адресов в логе:
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' access.log

Выводим только уникальные ip адреса:
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' access.log | sort | uniq

А теперь считаем их количество:
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' access.log | sort | uniq | wc -l

10 самых активных IP адресов с наибольшим количеством запросов:
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' access.log | sort | uniq -c | sort -n -r | head -10

Не обязательно ip адреса грепать именно по регулярке. Можно взять awk и выводить первый столбец. Результат будет тот же самый, но с регуляркой более универсальное решение, которое сработает на любом лог файле, где есть ip адреса. Пример с awk будет ниже. 

10 самых популярных url:
awk '{print $7}' access.log | sort | uniq -c | sort -n -r | head -10

Подсчитать количество 500-х ошибок:
awk '{print $10}' access.log | grep 500 | wc -l
Обращаю внимание на номер столбца $10. У вас он может отличаться в зависимости от формата лога nginx или apache. Я обычно немного изменяю стандартный формат, добавляя несколько дополнительных столбцов.

Вывести ip адрес и url запроса, где была 500 ошибка:
grep 'status=500' access.log | awk '{print $1,$7}'

Данные примеры легко модифицируются под практически любые запросы информации из логов. Достаточно немного потренироваться и разобраться в синтаксисе. Ниже ещё немного того, что может пригодиться. Например, ограничение лога по времени. К нему далее можно применять все предыдущие выборки.

Вывести все записи лога в интервале 20.02.2022 15:20 - 16:20
cat access.log | sed -n '/20\/Feb\/2022:15:20/,/20\/Feb\/2022:16:20/p'

Просмотр установленных соединений к веб серверу, а также их подсчёт:
netstat -tan | grep "ESTABLISHED" | grep ":443"
netstat -tan | grep "ESTABLISHED" | grep ":443" | wc -l

Забирайте в закладки, чтобы потом не искать и не вспоминать, как написать. Bash такая штука, если постоянно на нём не пишешь, то очень долго рожаешь решения. Поэтому я всегда и всё записываю, чтобы потом просто брать готовые конструкции и немного модифицировать по необходимости. Хотя бы не приходится вспоминать утилиты и ключи. Со временем забывается. Например, я частенько забываю про утилиту uniq, а потом думаю, как бы мне повторяющиеся строки отсечь. 
*******************************************

*******************************************

*******************************************

*******************************************

*******************************************

*******************************************

*******************************************
